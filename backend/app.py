from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from flask_socketio import SocketIO, emit
import os
import json
import zipfile
import tempfile
import shutil
from datetime import datetime
import uuid
from pathlib import Path
import subprocess
import threading
import queue
import time

app = Flask(__name__)
CORS(app)
socketio = SocketIO(app, cors_allowed_origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECTS_DIR = "projects"
TEMP_DIR = "temp"
MAX_PROJECTS_PER_USER = 10

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(PROJECTS_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
project_queue = queue.Queue()

class ProjectGenerator:
    def __init__(self):
        self.templates = {
            "html": {
                "files": {
                    "index.html": self.get_html_index,
                    "styles.css": self.get_html_styles,
                    "script.js": self.get_html_script,
                    "README.md": self.get_html_readme
                }
            }
        }
    
    def generate_project(self, project_type, description, project_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞
            project_id = str(uuid.uuid4())
            project_path = os.path.join(PROJECTS_DIR, project_id)
            os.makedirs(project_path, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
            template = self.templates.get(project_type, self.templates["html"])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            for file_path, generator_func in template["files"].items():
                full_path = os.path.join(project_path, file_path)
                os.makedirs(os.path.dirname(full_path), exist_ok=True)
                
                content = generator_func(project_name, description)
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write(content)
            
            return {
                "success": True,
                "project_id": project_id,
                "project_name": project_name,
                "files": list(template["files"].keys())
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def get_html_index(self, project_name, description):
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>{project_name}</h1>
            <p>{description}</p>
        </header>
        <main>
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI</p>
        </main>
    </div>
    <script src="script.js"></script>
</body>
</html>"""
    
    def get_html_styles(self, project_name, description):
        return """body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.container {
    text-align: center;
    color: white;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    backdrop-filter: blur(10px);
}

h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

p {
    font-size: 1.2rem;
    margin-bottom: 1rem;
}"""

    def get_html_script(self, project_name, description):
        return """console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.container');
    
    container.addEventListener('click', function() {
        this.style.transform = 'scale(1.05)';
        setTimeout(() => {
            this.style.transform = 'scale(1)';
        }, 200);
    });
});"""

    def get_html_readme(self, project_name, description):
        return f"""# {project_name}

{description}

## –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Lovable AI

### –ó–∞–ø—É—Å–∫

–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:

```bash
python -m http.server 8000
```

–ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
generator = ProjectGenerator()

# –£–º–Ω—ã–π AI-–∞–≥–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–æ—Å—Ç—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.user_preferences = {}
        self.current_context = None
        self.last_topic = None
        self.user_mood = "neutral"
        self.interaction_count = 0
        
        # –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è
        self.learning_data = {
            "successful_responses": {},
            "failed_responses": {},
            "user_patterns": {},
            "preferred_topics": [],
            "response_style": "normal"
        }
        
    def generate_response(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è"""
        message_type = self.analyze_message(message)
        self.conversation_history.append({"user": message, "type": message_type})
        self.current_context = message_type
        self.last_topic = message_type
        
        # –£—á–∏–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.learn_from_interaction(message, message_type)
        
        return self.generate_normal_response(message, message_type)
    
    def analyze_message(self, message):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        message_lower = message.lower()
        self.interaction_count += 1
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "hi", "hello"]):
            return "greeting"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏
        if any(word in message_lower for word in ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å"]):
            return "wellbeing"
        
        # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        if any(word in message_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π", "–ø–æ—Å—Ç—Ä–æ–π", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "–Ω–∞–ø–∏—à–∏"]):
            return "create_project"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        if any(word in message_lower for word in ["—á—Ç–æ —É–º–µ–µ—à—å", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏", "–ø–æ–º–æ—â—å"]):
            return "capabilities"
        
        # –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        if any(word in message_lower for word in ["–∏–≥—Ä–∞", "game", "–∏–≥—Ä", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", "–≤–µ—Å–µ–ª–æ"]):
            return "game_discussion"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        if any(word in message_lower for word in ["—á—Ç–æ –º–æ–∂–Ω–æ", "—á—Ç–æ –¥—É–º–∞–µ—à—å", "–∫–∞–∫ –¥—É–º–∞–µ—à—å", "–ø—Ä–µ–¥–ª–æ–∂–∏", "–∏–¥–µ–∏"]):
            return "suggestions"
        
        return "general"
    
    def learn_from_interaction(self, message, response_type):
        """–£—á–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        message_lower = message.lower()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "–∏–≥—Ä–∞" in message_lower or "game" in message_lower:
            if "–∏–≥—Ä–∞" not in self.learning_data["preferred_topics"]:
                self.learning_data["preferred_topics"].append("–∏–≥—Ä–∞")
        
        if "–±—É–¥–∏–ª—å–Ω–∏–∫" in message_lower or "—Ç–∞–π–º–µ—Ä" in message_lower:
            if "—Ç–∞–π–º–µ—Ä" not in self.learning_data["preferred_topics"]:
                self.learning_data["preferred_topics"].append("—Ç–∞–π–º–µ—Ä")
    
    def create_project_response(self, project_type, description):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
        global generator
        
        project_name = f"–ü—Ä–æ–µ–∫—Ç {project_type}"
        result = generator.generate_project("html", description, project_name)
        
        if result['success']:
            # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
            archive_path = create_project_archive(result['project_id'])
            download_url = f"http://localhost:5002/api/download/{result['project_id']}"
            
            return {
                "type": "project_created",
                "message": f"‚úÖ {description} –≥–æ—Ç–æ–≤!\n\nüéâ –í–∞—à –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nüì¶ –ü—Ä–æ–µ–∫—Ç ID: {result['project_id']}\n‚¨áÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
                "project_id": result['project_id'],
                "download_url": download_url,
                "suggestions": [
                    "–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                    "–°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç",
                    "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥",
                    "–ß—Ç–æ –µ—â–µ –º–æ–∂–µ—à—å?"
                ]
            }
        else:
            return {
                "type": "error",
                "message": f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                "suggestions": [
                    "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
                    "–°–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç",
                    "–ü–æ–º–æ—â—å"
                ]
            }
    
    def generate_normal_response(self, message, message_type):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        if message_type == "greeting":
            return {
                "type": "ai_response",
                "message": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø Lovable AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å–∞–π—Ç—ã, –∏–≥—Ä—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "suggestions": [
                    "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å",
                    "–°–æ–∑–¥–∞–π –±—É–¥–∏–ª—å–Ω–∏–∫",
                    "–°–¥–µ–ª–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                    "–•–æ—á—É –∏–≥—Ä—É"
                ]
            }
        
        elif message_type == "wellbeing":
            return {
                "type": "ai_response",
                "message": "–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üòä –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
                "suggestions": [
                    "–°–æ–∑–¥–∞–π –±—É–¥–∏–ª—å–Ω–∏–∫",
                    "–°–¥–µ–ª–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                    "–•–æ—á—É –∏–≥—Ä—É",
                    "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
                ]
            }
        
        elif message_type == "game_discussion":
            return {
                "type": "ai_response",
                "message": "–û—Ç–ª–∏—á–Ω–æ! üéÆ –ò–≥—Ä—ã - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã:\n\n‚Ä¢ üéØ –ò–≥—Ä—ã –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å\n‚Ä¢ üß© –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ø–∞–∑–ª—ã\n‚Ä¢ üé≤ –ü—Ä–æ—Å—Ç—ã–µ –∞—Ä–∫–∞–¥–Ω—ã–µ –∏–≥—Ä—ã\n‚Ä¢ üèÜ –° —Å–∏—Å—Ç–µ–º–æ–π –æ—á–∫–æ–≤ –∏ —Ä–µ–∫–æ—Ä–¥–æ–≤\n\n–ö–∞–∫–∞—è –∏–≥—Ä–∞ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ò–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–¥–µ–∏?",
                "suggestions": [
                    "–°–æ–∑–¥–∞–π –∏–≥—Ä—É –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é",
                    "–°–¥–µ–ª–∞–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É",
                    "–ê—Ä–∫–∞–¥–Ω–∞—è –∏–≥—Ä–∞",
                    "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                ]
            }
        
        elif message_type == "suggestions":
            return {
                "type": "ai_response",
                "message": "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n\nüéÆ **–ò–≥—Ä—ã:** –∞—Ä–∫–∞–¥–Ω—ã–µ, –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é\n‚è∞ **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è:** –±—É–¥–∏–ª—å–Ω–∏–∫–∏, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã, —Ç–∞–π–º–µ—Ä—ã\nüé® **–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:** –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n\n–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ò–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–¥–µ–∏?",
                "suggestions": [
                    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏–≥—Ä—ã",
                    "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
                    "–°–æ–∑–¥–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å"
                ]
            }
        
        elif message_type == "create_project":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            message_lower = message.lower()
            
            if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in message_lower:
                return self.create_project_response("calculator", "–°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º")
            elif "–±—É–¥–∏–ª—å–Ω–∏–∫" in message_lower:
                return self.create_project_response("alarm", "–°–æ–∑–¥–∞—é —Å—Ç–∏–ª—å–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ —Å –∑–≤—É–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            elif "–∏–≥—Ä" in message_lower:
                return self.create_project_response("game", "–°–æ–∑–¥–∞—é —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π")
            elif "—Å–∞–π—Ç" in message_lower and "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç" in message_lower:
                return self.create_project_response("university", "–°–æ–∑–¥–∞—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–π—Ç –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")
            else:
                return {
                    "type": "ai_response", 
                    "message": "–û—Ç–ª–∏—á–Ω–æ! üöÄ –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n‚Ä¢ ‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫ –∏–ª–∏ —Ç–∞–π–º–µ—Ä\n‚Ä¢ üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n‚Ä¢ üéÆ –ò–≥—Ä—É\n‚Ä¢ üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "suggestions": [
                        "–°–æ–∑–¥–∞–π –±—É–¥–∏–ª—å–Ω–∏–∫",
                        "–°–¥–µ–ª–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
                        "–•–æ—á—É –∏–≥—Ä—É",
                        "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã"
                    ]
                }
        
        elif message_type == "capabilities":
            return {
                "type": "ai_response",
                "message": "–Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! üöÄ\n\n‚Ä¢ ‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫–∏ –∏ —Ç–∞–π–º–µ—Ä—ã\n‚Ä¢ üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã\n‚Ä¢ üéÆ –ü—Ä–æ—Å—Ç—ã–µ –∏–≥—Ä—ã\n‚Ä¢ üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã\n‚Ä¢ üé® –ö—Ä–∞—Å–∏–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã\n\n–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!",
                "suggestions": [
                    "–°–æ–∑–¥–∞–π –±—É–¥–∏–ª—å–Ω–∏–∫",
                    "–°–¥–µ–ª–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                    "–•–æ—á—É –∏–≥—Ä—É",
                    "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã"
                ]
            }
        
        else:
            return {
                "type": "ai_response",
                "message": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å? –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏, –∏–≥—Ä–∞–º–∏, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞–º–∏ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                "suggestions": [
                    "–°–æ–∑–¥–∞–π –±—É–¥–∏–ª—å–Ω–∏–∫",
                    "–°–¥–µ–ª–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                    "–•–æ—á—É –∏–≥—Ä—É",
                    "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
                ]
            }

ai_agent = SmartAI()

# API endpoints
@app.route('/api/chat', methods=['POST'])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    data = request.json
    message = data.get('message', '')
    
    ai_response = ai_agent.generate_response(message)
    
    return jsonify(ai_response)

@app.route('/api/generate-project', methods=['POST'])
def generate_project():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    data = request.json
    description = data.get('description', '')
    project_name = data.get('project_name', '–ú–æ–π –ø—Ä–æ–µ–∫—Ç')
    project_type = data.get('project_type', 'html')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    result = generator.generate_project(project_type, description, project_name)
    
    if result['success']:
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
        archive_path = create_project_archive(result['project_id'])
        result['download_url'] = f"/api/download/{result['project_id']}"
        result['archive_path'] = archive_path
    
    return jsonify(result)

@app.route('/api/download/<project_id>')
def download_project(project_id):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_path = os.path.join(PROJECTS_DIR, project_id)
    archive_path = os.path.join(TEMP_DIR, f"{project_id}.zip")
    
    if not os.path.exists(project_path):
        return jsonify({"error": "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    
    # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(archive_path):
        create_project_archive(project_id)
    
    return send_file(archive_path, as_attachment=True, download_name=f"project_{project_id}.zip")

@app.route('/api/projects')
def list_projects():
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    projects = []
    for project_id in os.listdir(PROJECTS_DIR):
        project_path = os.path.join(PROJECTS_DIR, project_id)
        if os.path.isdir(project_path):
            projects.append({
                "id": project_id,
                "name": f"–ü—Ä–æ–µ–∫—Ç {project_id[:8]}",
                "created_at": datetime.fromtimestamp(os.path.getctime(project_path)).isoformat()
            })
    
    return jsonify({"projects": projects})

@app.route('/api/ai/status')
def get_ai_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return jsonify({
        "available_services": [
            {
                "name": "SmartAI",
                "enabled": True,
                "configured": True
            }
        ],
        "current_ai": "smartai",
        "configured": True
    })

def create_project_archive(project_id):
    """–°–æ–∑–¥–∞—ë—Ç –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_path = os.path.join(PROJECTS_DIR, project_id)
    archive_path = os.path.join(TEMP_DIR, f"{project_id}.zip")
    
    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(project_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, project_path)
                zipf.write(file_path, arcname)
    
    return archive_path

# WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@socketio.on('connect')
def handle_connect():
    print('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')

@socketio.on('disconnect')
def handle_disconnect():
    print('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è')

@socketio.on('generate_project')
def handle_project_generation(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ WebSocket"""
    project_id = data.get('project_id')
    description = data.get('description')
    project_name = data.get('project_name', '–ú–æ–π –ø—Ä–æ–µ–∫—Ç')
    project_type = data.get('project_type', 'html')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    emit('project_status', {
        'status': 'generating',
        'message': '–°–æ–∑–¥–∞—é –ø—Ä–æ–µ–∫—Ç...'
    })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    result = generator.generate_project(project_type, description, project_name)
    
    if result['success']:
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤
        archive_path = create_project_archive(result['project_id'])
        
        emit('project_status', {
            'status': 'completed',
            'project_id': result['project_id'],
            'download_url': f"/api/download/{result['project_id']}",
            'message': '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!'
        })
    else:
        emit('project_status', {
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞: {result["error"]}'
        })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Lovable AI Platform...")
    print("üìç Backend: http://localhost:5002")
    print("üîå WebSocket: ws://localhost:5002")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    socketio.run(app, host='0.0.0.0', port=5002, debug=True) 